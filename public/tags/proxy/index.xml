<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Proxy on wiki.ght1pc9kc.fr</title>
    <link>/tags/proxy.html</link>
    <description>Recent content in Proxy on wiki.ght1pc9kc.fr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    
	<atom:link href="/tags/proxy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Connection securisé et reverse proxy</title>
      <link>/development/spring/secure-connection-and-reverse-proxy.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/spring/secure-connection-and-reverse-proxy.html</guid>
      <description>Dans le cadre d’un projet, j’ai une configuration Spring Secure tel que :
... http.requiresChannel() .antMatchers(&amp;#34;/client/&amp;#34;).requiresSecure() .antMatchers(&amp;#34;/fr/client/&amp;#34;).requiresSecure() .antMatchers(&amp;#34;/es/client/&amp;#34;).requiresSecure() .antMatchers(&amp;#34;/en/client/&amp;#34;).requiresSecure() ... Ce qui provoque un redirect vers https si l’on tente d’accéder à l’une de ces URL en http.
Le problème est lorsque que je mets un reverse proxy NginX devant, c’est lui qui s’occupe du https, il redirige vers mes routes Spring en http. Spring ne permet de configurer qu’un seul port de serveur qui peut faire http/https.</description>
    </item>
    
    <item>
      <title>Squid StoreId rewrite</title>
      <link>/linux/divers/squid-storeid-rewrite.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux/divers/squid-storeid-rewrite.html</guid>
      <description>Un truc que j&amp;rsquo;ai cherché à faire avec Squid est de mettre en cache les téléchargements que docker fait pour construire ses images afin qu&amp;rsquo;il ne re-télécharge pas systématiquement tout.
Pas compliqué, il suffit d&amp;rsquo;augmenter la taille max des fichiers a cacher et du répertoire de cache :
cache_dir ufs /var/spool/squid3 5000 16 256 maximum_object_size 400 MB Mais j&amp;rsquo;ai surtout eu un problème avec le téléchargement des JRE &amp;amp; JDK Oracle.</description>
    </item>
    
    <item>
      <title>Squid refresh pattern</title>
      <link>/linux/divers/squid-refresh-pattern.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux/divers/squid-refresh-pattern.html</guid>
      <description>Dans le cadre de mon serveur proxy pour fichier téléchargés, je suis tombé sur un problème avec neo4j dont les fichiers tar.gz n&amp;rsquo;étaient jamais mis en cache.
Symptômes Le premier symptôme est que le fichier est systématiquement re-téléchargé.
Deuxième symptôme, les logs store affichent que le fichier est immédiatement RELEASE et que sa date de péremption est passé.
Explication En fait, dans l&amp;rsquo;entête de la requête HTTP, il y a une directive</description>
    </item>
    
    <item>
      <title>Upload file to Nexus Repository</title>
      <link>/misc/upload-file-to-nexus-repository.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/misc/upload-file-to-nexus-repository.html</guid>
      <description>Il y a une feature intéressante sur les serveurs Nexus qui semble pas forcément très utilisé. Il est possible de créer une Repository de type site. Ca donne un repo qui héberge des fichiers statique et c&amp;rsquo;est pratique pour stocker par exemeple des applications ou des fichiers que l&amp;rsquo;on recupère souvent mais que l&amp;rsquo;on veut pas télécharger chaque fois depuis internet.
Pour uploader un fichier on peut utiliser la commande suivante :</description>
    </item>
    
    <item>
      <title>WGET avec un proxy</title>
      <link>/linux/network/wget-avec-un-proxy.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux/network/wget-avec-un-proxy.html</guid>
      <description>WGET est un programme en ligne de commande qui permet de télécharger des fichiers depuis le web. Pour une utilisation en entreprise, il se peut qu’un proxy filtre les accès au web.
## Utiliser WGET avec un proxy simple
Créer un fichier .wgetrc (n&amp;rsquo;oubliez pas le point devant le fichier) a la racine de votre répertoire personnel avec le contenu suivant :
http_proxy = http://votre_proxy:port_proxy/ use_proxy = on wait = 15  Vérifiez que ca fonctionne en rapatriant un fichier test :</description>
    </item>
    
  </channel>
</rss>
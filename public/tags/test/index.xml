<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test on wiki.ght1pc9kc.fr</title>
    <link>/tags/test.html</link>
    <description>Recent content in Test on wiki.ght1pc9kc.fr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    
	<atom:link href="/tags/test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lancer Neo4j Impermanent Database &#43; REST Server sur un port aléatoire</title>
      <link>/development/java/start-neo4j-impermanent-database-&#43;-rest-server-on-random-port-for-test.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/java/start-neo4j-impermanent-database-&#43;-rest-server-on-random-port-for-test.html</guid>
      <description>Pour des tests par exemple, vu que la licence Neo4j ne permet que l&amp;rsquo;utilisation des API REST, on peut avoir besoin lors de test de lancer un server éphémaire sur lequel brancher les jeux de test. Cela se fait en deux étapes : * Lancement du serveur neo4j * Lancement de la surcouche REST
db = new TestGraphDatabaseFactory().newImpermanentDatabase(); boolean available = db.isAvailable(5000); assert available; int start = -1; Random random = new Random(); while (start !</description>
    </item>
    
    <item>
      <title>Répéter un test x fois avec jUnit</title>
      <link>/development/java/repeat-test-with-junit.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/java/repeat-test-with-junit.html</guid>
      <description>Ajouter la Rule RepeatRule :
@Rule public RepeatRule repeatRule = new RepeatRule(); Ajouter l&amp;rsquo;annotation @Repeat au test :
@Repeat(times = 100) Dans IntelliJ, les X exécutions n&amp;rsquo;apparaissent pas, il n&amp;rsquo;y a qu&amp;rsquo;une ligne mais qui a pris plus de temps.</description>
    </item>
    
    <item>
      <title>Tester des membres private</title>
      <link>/development/java/tester-des-membres-private.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/java/tester-des-membres-private.html</guid>
      <description>Un des truc compliqué quand on fait des test unitaire c&amp;rsquo;est de tester les membres private. Un solution pour faire ça :
/** * Gets the field value from an instance. The field we wish to retrieve is * specified by passing the name. The value will be returned, even if the * field would have private or protected access. */ private Object getField( Object instance, String name ) throws Exception { Class c = instance.</description>
    </item>
    
  </channel>
</rss>